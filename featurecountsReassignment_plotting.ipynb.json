{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "018e9442",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import pybedtools\n",
    "from matplotlib import pyplot as plt\n",
    "import pyBigWig\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "from statistics import mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d6633c33",
   "metadata": {},
   "outputs": [],
   "source": [
    "with38 = pd.read_csv('/Users/daliasebat/Desktop/Yeo-Lab-Summer/results/Read_analysis/hg38_WITH.tsv', sep='\\t')\n",
    "without38 = pd.read_csv('/Users/daliasebat/Desktop/Yeo-Lab-Summer/results/Read_analysis/hg38_WITHOUT.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bf3fa754",
   "metadata": {},
   "outputs": [],
   "source": [
    "gtf = pd.read_csv('/Users/daliasebat/Desktop/Yeo-Lab-Summer/gencode.v35.annotation.with_ids.gtf', sep='\\t')\n",
    "gtf=gtf.drop_duplicates(\"gene_name\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b0c60ce7",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot=pd.read_csv(\"/Users/daliasebat/Desktop/Yeo-Lab-Summer/TESTDATA\")\n",
    "plot=plot[[\"small_gene_name\",\"large_gene_name\", \"small_length\", \"large_length\", \"small_counts\", \"large_counts\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f6a47700",
   "metadata": {},
   "outputs": [],
   "source": [
    "with38.columns = ['y']\n",
    "without38.columns = ['x']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f6ca84f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>snoZ196</th>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZYX</th>\n",
       "      <td>852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZYG11B</th>\n",
       "      <td>5009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZW10</th>\n",
       "      <td>1270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZSWIM8-AS1</th>\n",
       "      <td>1303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAMDC</th>\n",
       "      <td>1373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAK1</th>\n",
       "      <td>3822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AACS</th>\n",
       "      <td>2581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1BG-AS1</th>\n",
       "      <td>637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1BG</th>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9287 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               y\n",
       "snoZ196       38\n",
       "ZYX          852\n",
       "ZYG11B      5009\n",
       "ZW10        1270\n",
       "ZSWIM8-AS1  1303\n",
       "...          ...\n",
       "AAMDC       1373\n",
       "AAK1        3822\n",
       "AACS        2581\n",
       "A1BG-AS1     637\n",
       "A1BG          67\n",
       "\n",
       "[9287 rows x 1 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with38"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "597e70ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Reassigned')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(without38['x'],with38['y'],marker='o')\n",
    "plt.xlabel('Original')\n",
    "plt.ylabel('Reassigned')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5ac2da0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 70000.0)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(without38['x'],with38['y'],marker='o')\n",
    "plt.xlabel('Original')\n",
    "plt.ylabel('Reassigned')\n",
    "plt.xlim(0,70000)\n",
    "plt.ylim(0,70000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7fdf3261",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 30000.0)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(without38['x'],with38['y'],marker='o')\n",
    "plt.xlabel('Original')\n",
    "plt.ylabel('Reassigned')\n",
    "plt.title(\"Genes with ambiguities from FeatureCounts before assignment vs after\")\n",
    "plt.xlim(0,30000)\n",
    "plt.ylim(0,30000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4a98bda8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(without38['x'],with38['y'],marker='o')\n",
    "ax = plt.gca()\n",
    "plt.xlabel('Original')\n",
    "plt.ylabel('Reassigned')\n",
    "plt.title(\"Genes with ambiguities from FeatureCounts before assignment vs after (log scale axes)\")\n",
    "ax.set_yscale('log')\n",
    "ax.set_xscale('log')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8059f352",
   "metadata": {},
   "source": [
    "# Average percent change in reads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "38466e45",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/px/62xmn67n7wd_bg291jjw09sw0000gs/T/ipykernel_9607/1367433090.py:3: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  pchange = ((with38.iloc[x][0]-without38.iloc[x][0])/without38.iloc[x][0])*100\n"
     ]
    }
   ],
   "source": [
    "percentchange = []\n",
    "for x in range(len(without38)):\n",
    "    pchange = ((with38.iloc[x][0]-without38.iloc[x][0])/without38.iloc[x][0])*100\n",
    "    if without38.iloc[x][0]!=0: percentchange.append(pchange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "123f6115",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1083000.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(percentchange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "76f1bb3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 588.,  774., 1390.,  610.,  228.,  502.,  175.]),\n",
       " array([0.e+00, 1.e-01, 5.e-01, 1.e+01, 5.e+01, 1.e+02, 5.e+02, 1.e+03]),\n",
       " <BarContainer object of 7 artists>)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(percentchange,bins=[0,0.1,0.5,10,50,100,500,1000])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9437bba",
   "metadata": {},
   "source": [
    "# Percentage of ones that my algorithm flagged (fully contained) that were also flagged by featurecounts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1127c686",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "You are trying to merge on int64 and object columns. If you wish to proceed you should use pd.concat",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/px/62xmn67n7wd_bg291jjw09sw0000gs/T/ipykernel_44569/685737990.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mwithout38\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwithout38\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"x\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mreassignednames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"counts\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwithout38\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mreassignednames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreassignednames\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgtf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"inner\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"gene_name\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mreassignednames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreassignednames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"gene_stable_id\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"counts\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mreassignednames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    105\u001b[0m     \u001b[0mvalidate\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m ) -> DataFrame:\n\u001b[0;32m--> 107\u001b[0;31m     op = _MergeOperation(\n\u001b[0m\u001b[1;32m    108\u001b[0m         \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m         \u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    702\u001b[0m         \u001b[0;31m# validate the merge keys dtypes. We may need to coerce\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m         \u001b[0;31m# to avoid incompatible dtypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_coerce_merge_keys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m         \u001b[0;31m# If argument passed to validate,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_maybe_coerce_merge_keys\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1250\u001b[0m                     \u001b[0minferred_right\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstring_types\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0minferred_left\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstring_types\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1251\u001b[0m                 ):\n\u001b[0;32m-> 1252\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1254\u001b[0m             \u001b[0;31m# datetimelikes must match exactly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: You are trying to merge on int64 and object columns. If you wish to proceed you should use pd.concat"
     ]
    }
   ],
   "source": [
    "indeces = without38.index\n",
    "reassignednames = pd.DataFrame(indeces, columns = [\"gene_name\"])\n",
    "without38 = without38.reset_index()\n",
    "without38 = without38[\"x\"]\n",
    "reassignednames[\"counts\"] = without38\n",
    "reassignednames = pd.merge(reassignednames,gtf,how=\"inner\",on=\"gene_name\")\n",
    "reassignednames = reassignednames[[\"gene_stable_id\",\"counts\"]]\n",
    "reassignednames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "acb43368",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gene_stable_id</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000281780</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000159840</td>\n",
       "      <td>852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000162378</td>\n",
       "      <td>5009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000086827</td>\n",
       "      <td>1270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000272589</td>\n",
       "      <td>1303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9282</th>\n",
       "      <td>ENSG00000087884</td>\n",
       "      <td>1373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9283</th>\n",
       "      <td>ENSG00000115977</td>\n",
       "      <td>3822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9284</th>\n",
       "      <td>ENSG00000081760</td>\n",
       "      <td>2581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9285</th>\n",
       "      <td>ENSG00000268895</td>\n",
       "      <td>637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9286</th>\n",
       "      <td>ENSG00000121410</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9287 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       gene_stable_id  counts\n",
       "0     ENSG00000281780      38\n",
       "1     ENSG00000159840     852\n",
       "2     ENSG00000162378    5009\n",
       "3     ENSG00000086827    1270\n",
       "4     ENSG00000272589    1303\n",
       "...               ...     ...\n",
       "9282  ENSG00000087884    1373\n",
       "9283  ENSG00000115977    3822\n",
       "9284  ENSG00000081760    2581\n",
       "9285  ENSG00000268895     637\n",
       "9286  ENSG00000121410      67\n",
       "\n",
       "[9287 rows x 2 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indeces = with38.index\n",
    "reassignednames = pd.DataFrame(indeces, columns = [\"gene_name\"])\n",
    "with38 = with38.reset_index()\n",
    "with38 = with38[\"y\"]\n",
    "reassignednames[\"counts\"] = with38\n",
    "reassignednames = pd.merge(reassignednames,gtf,how=\"inner\",on=\"gene_name\")\n",
    "reassignednames = reassignednames[[\"gene_stable_id\",\"counts\"]]\n",
    "reassignednames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e398d421",
   "metadata": {},
   "outputs": [],
   "source": [
    "genes = gtf[gtf.biotype == 'gene']\n",
    "genes_bed =pybedtools.BedTool.from_dataframe(genes[['chrom', 'start', 'end', 'gene_name', 'gene_stable_id', 'strand']])\n",
    "genes_pc = genes[genes.gene_type == 'protein_coding']\n",
    "genes_pc_bed=pybedtools.BedTool.from_dataframe(genes_pc[['chrom', 'start', 'end', 'gene_name', 'gene_stable_id', 'strand']])\n",
    "\n",
    "minimumOverlap = 1.0\n",
    "overlap = genes_bed.intersect(genes_bed, wa=True, wb=True,f=minimumOverlap,F=minimumOverlap,e=True,s=True).to_dataframe(names=['chromA', 'startA', 'endA', 'gene_nameA', 'gene_stable_idA', 'strandA',\n",
    "                                                                       'chromB', 'startB', 'endB', 'gene_nameB', 'gene_stable_idB', 'strandB'])\n",
    "overlap=overlap[(overlap.gene_nameA != overlap.gene_nameB)]\n",
    "overlap=overlap.reset_index()\n",
    "overlap=overlap.iloc[::2]\n",
    "overlap=overlap.reset_index()\n",
    "overlap=overlap.drop(['level_0', 'index'],axis=1)\n",
    "column_names = [\"small_gene_name\", \"large_gene_name\",\"small_length\",\"large_length\"]\n",
    "plot = pd.DataFrame(columns = column_names)\n",
    "for i in range(len(overlap)):\n",
    "        if ((overlap.iloc[i].endB)-(overlap.iloc[i].startB))<((overlap.iloc[i].endA)-(overlap.iloc[i].startA)):\n",
    "            to_append = pd.DataFrame({\"small_gene_name\":[overlap.iloc[i].gene_stable_idA],\"large_gene_name\" : [overlap.iloc[i].gene_stable_idB],\"small_length\" : [(overlap.iloc[i].endB)-(overlap.iloc[i].startB)],\"large_length\" : [(overlap.iloc[i].endA)-(overlap.iloc[i].startA)]})\n",
    "            plot = plot.append(to_append, ignore_index = True)\n",
    "        else:\n",
    "            to_append = pd.DataFrame({\"small_gene_name\":[overlap.iloc[i].gene_stable_idA],\"large_gene_name\" : [overlap.iloc[i].gene_stable_idB],\"small_length\" : [(overlap.iloc[i].endA)-(overlap.iloc[i].startA)],\"large_length\" : [(overlap.iloc[i].endB)-(overlap.iloc[i].startB)]})\n",
    "            plot = plot.append(to_append, ignore_index = True)\n",
    "plot = plot.drop_duplicates()\n",
    "algorithmlist = plot[\"small_gene_name\"].tolist() + plot[\"large_gene_name\"].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b49f41a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gene_stable_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000177042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000266003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000178764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000171988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000279189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13339</th>\n",
       "      <td>ENSG00000226049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13340</th>\n",
       "      <td>ENSG00000278524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13341</th>\n",
       "      <td>ENSG00000263381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13342</th>\n",
       "      <td>ENSG00000176900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13343</th>\n",
       "      <td>ENSG00000238998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13344 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        gene_stable_id\n",
       "0      ENSG00000177042\n",
       "1      ENSG00000266003\n",
       "2      ENSG00000178764\n",
       "3      ENSG00000171988\n",
       "4      ENSG00000279189\n",
       "...                ...\n",
       "13339  ENSG00000226049\n",
       "13340  ENSG00000278524\n",
       "13341  ENSG00000263381\n",
       "13342  ENSG00000176900\n",
       "13343  ENSG00000238998\n",
       "\n",
       "[13344 rows x 1 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "algorithmlist = list(set(algorithmlist))\n",
    "algorithmdf = pd.DataFrame(algorithmlist, columns = [\"gene_stable_id\"])\n",
    "algorithmdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f52eaa28",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'reassignednames' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/px/62xmn67n7wd_bg291jjw09sw0000gs/T/ipykernel_44569/3697133053.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcombinedDF\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malgorithmdf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mreassignednames\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"inner\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"gene_stable_id\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mcombinedDF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'reassignednames' is not defined"
     ]
    }
   ],
   "source": [
    "combinedDF = pd.merge(algorithmdf,reassignednames,how=\"inner\",on=\"gene_stable_id\")\n",
    "combinedDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c1827209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67.86906428340691"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(6303)/9287*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a53be58e",
   "metadata": {},
   "source": [
    "# Percentage (of ones that were in both) that were annotated with small gene and had less than 100% reads? \n",
    "# null case is both getting the reads counted? or neither?\n",
    "# if neither then Percentage (of ones that were in both) that were annotated with small gene and had more than 0% reads "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ad748931",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'combinedDF' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/px/62xmn67n7wd_bg291jjw09sw0000gs/T/ipykernel_44569/3555094943.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplot4\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"small_gene_name\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"large_gene_name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"gene_stable_id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"small_gene_name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"gene_stable_id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"large_gene_name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m         \u001b[0msmall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"gene_stable_id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"small_gene_name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mlarge\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcombinedDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"gene_stable_id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"large_gene_name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'combinedDF' is not defined"
     ]
    }
   ],
   "source": [
    "plot4 = pd.DataFrame(columns=[\"small_gene_name\",\"large_gene_name\"])\n",
    "for x in range(len(plot)):\n",
    "    if (not combinedDF[combinedDF[\"gene_stable_id\"]==plot.iloc[x][\"small_gene_name\"]].empty) and (not combinedDF[combinedDF[\"gene_stable_id\"]==plot.iloc[x][\"large_gene_name\"]].empty):\n",
    "        small=combinedDF[combinedDF[\"gene_stable_id\"]==plot.iloc[x][\"small_gene_name\"]]\n",
    "        large=combinedDF[combinedDF[\"gene_stable_id\"]==plot.iloc[x][\"large_gene_name\"]]\n",
    "        newplot = plot.iloc[x]\n",
    "        plot4=pd.concat([plot4,pd.DataFrame(newplot).T])\n",
    "plot4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "279490eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReadDensity:\n",
    "    \"\"\"\n",
    "    ReadDensity class\n",
    "    Attributes:\n",
    "        self.pos(positive *.bw file)\n",
    "        self.neg(negative *.bw file)\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, pos, neg, name=None):\n",
    "        try:\n",
    "            self.pos = pyBigWig.open(pos)\n",
    "            self.neg = pyBigWig.open(neg)\n",
    "            self.name = name if name is not None else pos.replace(\n",
    "                'fwd', '*'\n",
    "            ).replace(\n",
    "                'rev', '*'\n",
    "            )\n",
    "\n",
    "        except Exception as e:\n",
    "            print(\"couldn't open the bigwig files!\")\n",
    "            print(e)\n",
    "\n",
    "    def values(self, chrom, start, end, strand):\n",
    "        \"\"\"\n",
    "        Parameters\n",
    "        ----------\n",
    "        chrom : basestring\n",
    "            (eg. chr1)\n",
    "        start : int\n",
    "            0-based start (first position in chromosome is 0)\n",
    "        end : int\n",
    "            1-based end (last position is not included)\n",
    "        strand : str\n",
    "            either '+' or '-'\n",
    "        Returns\n",
    "        -------\n",
    "        densites : list\n",
    "            values corresponding to density over specified positions.\n",
    "        \"\"\"\n",
    "\n",
    "        try:\n",
    "            if strand == \"+\":\n",
    "                return list(pd.Series(self.pos.values(chrom, start, end)).fillna(0))\n",
    "            elif strand == \"-\":\n",
    "                return list(pd.Series(self.neg.values(chrom, start, end)).fillna(0))\n",
    "            else:\n",
    "                print(\"Strand neither + or -\")\n",
    "                return 1\n",
    "        except RuntimeError:\n",
    "            # usually occurs when no chromosome exists in the bigwig file\n",
    "            return list(pd.Series([np.NaN] * abs(start - end)).fillna(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a4249d9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "linestyles = {\n",
    "    'exon': {\n",
    "        'color': 'r',\n",
    "        'linewidth': 6,\n",
    "        'offset': 0\n",
    "    },\n",
    "    'UTR': {\n",
    "        'color': 'y',\n",
    "        'linewidth': 2,\n",
    "        'offset': 4\n",
    "    },\n",
    "    'transcript': {\n",
    "        'color': 'b',\n",
    "        'linewidth': 3,\n",
    "        'offset': 8\n",
    "    },\n",
    "    'CDS': {\n",
    "        'color': 'orange',\n",
    "        'linewidth': 4,\n",
    "        'offset': 12\n",
    "    }\n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "92e97f91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>intron_name</th>\n",
       "      <th>small_name</th>\n",
       "      <th>t-test_statistic</th>\n",
       "      <th>t-test_pvalue</th>\n",
       "      <th>likely_annotation</th>\n",
       "      <th>percentage_small</th>\n",
       "      <th>percentage_intron</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [intron_name, small_name, t-test_statistic, t-test_pvalue, likely_annotation, percentage_small, percentage_intron]\n",
       "Index: []"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "column_names = [\"intron_name\", \"small_name\", \"t-test_statistic\",\"t-test_pvalue\",\"likely_annotation\",\"percentage_small\",\"percentage_intron\"]\n",
    "\n",
    "tests = pd.DataFrame(columns = column_names)\n",
    "tests.head()\n",
    "\n",
    "for overlaps_index in range(len(plot4)):\n",
    "\n",
    "    smallname = plot4.iloc[overlaps_index].small_gene_name.strip()\n",
    "    intronname = plot4.iloc[overlaps_index].large_gene_name.strip()\n",
    "\n",
    "    gene_rows = gtf[(\n",
    "        gtf.gene_stable_id.isin([\n",
    "            smallname\n",
    "        ])) \n",
    "    ]\n",
    "\n",
    "    small_start = gene_rows.start.min()\n",
    "    small_end = gene_rows.end.max()\n",
    "\n",
    "    gene_rows = gtf[(\n",
    "        gtf.gene_stable_id.isin([ \n",
    "            #smallname, \n",
    "            intronname\n",
    "        ])) \n",
    "    ]\n",
    "\n",
    "    big_start = gene_rows.start.min()\n",
    "    big_end = gene_rows.end.max()\n",
    "\n",
    "    rdd25 = ReadDensity(\n",
    "        pos='IP25.fwd.sorted.bw',\n",
    "        neg='IP25.rev.sorted.bw'\n",
    "    )\n",
    "\n",
    "    rdd27 = ReadDensity(\n",
    "        pos='IP27.fwd.sorted.bw',\n",
    "        neg='IP27.rev.sorted.bw'\n",
    "    )\n",
    "\n",
    "    rdd29 = ReadDensity(\n",
    "        pos='IP29.fwd.sorted.bw',\n",
    "        neg='IP29.rev.sorted.bw'\n",
    "    )\n",
    "\n",
    "    chrom = gene_rows.chrom.unique()[0]\n",
    "\n",
    "    coverage_pos25 = rdd25.values(chrom=chrom, start=small_start, end=small_end, strand='+')\n",
    "    coverage_neg25 = rdd25.values(chrom=chrom, start=small_start, end=small_end, strand='-')\n",
    "    coverage_pos27 = rdd27.values(chrom=chrom, start=small_start, end=small_end, strand='+')\n",
    "    coverage_neg27 = rdd27.values(chrom=chrom, start=small_start, end=small_end, strand='-')\n",
    "    coverage_pos29 = rdd29.values(chrom=chrom, start=small_start, end=small_end, strand='+')\n",
    "    coverage_neg29 = rdd29.values(chrom=chrom, start=small_start, end=small_end, strand='-')\n",
    "\n",
    "    total_coverage25 = np.array([np.abs(coverage_pos25[i]) + np.abs(coverage_neg25[i]) for i in range(len(coverage_pos25))])\n",
    "    total_coverage27 = np.array([np.abs(coverage_pos27[i]) + np.abs(coverage_neg27[i]) for i in range(len(coverage_pos27))])\n",
    "    total_coverage29 = np.array([np.abs(coverage_pos29[i]) + np.abs(coverage_neg29[i]) for i in range(len(coverage_pos29))])\n",
    "\n",
    "    total_coverage_small = (total_coverage25 + total_coverage27 + total_coverage29)/3\n",
    "    smallmean = mean(total_coverage_small)\n",
    "\n",
    "    coverage_pos251 = rdd25.values(chrom=chrom, start=big_start, end=small_start, strand='+')\n",
    "    coverage_neg251 = rdd25.values(chrom=chrom, start=big_start, end=small_start, strand='-')\n",
    "    coverage_pos271 = rdd27.values(chrom=chrom, start=big_start, end=small_start, strand='+')\n",
    "    coverage_neg271 = rdd27.values(chrom=chrom, start=big_start, end=small_start, strand='-')\n",
    "    coverage_pos291 = rdd29.values(chrom=chrom, start=big_start, end=small_start, strand='+')\n",
    "    coverage_neg291 = rdd29.values(chrom=chrom, start=big_start, end=small_start, strand='-')\n",
    "\n",
    "    total_coverage251 = np.array([np.abs(coverage_pos251[i]) + np.abs(coverage_neg251[i]) for i in range(len(coverage_pos251))])\n",
    "    total_coverage271 = np.array([np.abs(coverage_pos271[i]) + np.abs(coverage_neg271[i]) for i in range(len(coverage_pos271))])\n",
    "    total_coverage291 = np.array([np.abs(coverage_pos291[i]) + np.abs(coverage_neg291[i]) for i in range(len(coverage_pos291))])\n",
    "\n",
    "    total_coverage_big1 = (total_coverage251 + total_coverage271 + total_coverage291)/3\n",
    "\n",
    "    coverage_pos25 = rdd25.values(chrom=chrom, start=small_end, end=big_end, strand='+')\n",
    "    coverage_neg25 = rdd25.values(chrom=chrom, start=small_end, end=big_end, strand='-')\n",
    "    coverage_pos27 = rdd27.values(chrom=chrom, start=small_end, end=big_end, strand='+')\n",
    "    coverage_neg27 = rdd27.values(chrom=chrom, start=small_end, end=big_end, strand='-')\n",
    "    coverage_pos29 = rdd29.values(chrom=chrom, start=small_end, end=big_end, strand='+')\n",
    "    coverage_neg29 = rdd29.values(chrom=chrom, start=small_end, end=big_end, strand='-')\n",
    "\n",
    "    total_coverage25 = np.array([np.abs(coverage_pos25[i]) + np.abs(coverage_neg25[i]) for i in range(len(coverage_pos25))])\n",
    "    total_coverage27 = np.array([np.abs(coverage_pos27[i]) + np.abs(coverage_neg27[i]) for i in range(len(coverage_pos27))])\n",
    "    total_coverage29 = np.array([np.abs(coverage_pos29[i]) + np.abs(coverage_neg29[i]) for i in range(len(coverage_pos29))])\n",
    "\n",
    "    total_coverage_big = (total_coverage25 + total_coverage27 + total_coverage29)/3\n",
    "    tcb = np.concatenate((total_coverage_big1, total_coverage_big))\n",
    "\n",
    "    intronmean = mean(tcb)\n",
    "\n",
    "    stat,val=stats.ttest_ind(total_coverage_small,total_coverage_big)\n",
    "\n",
    "    if stat<0:\n",
    "        annot = \"intron\"\n",
    "    else:\n",
    "        if val<0.05: \n",
    "            annot = \"small gene\"\n",
    "        else: \n",
    "            annot = \"intron\"\n",
    "\n",
    "    if annot == \"small gene\" and intronmean<smallmean:\n",
    "        percentagesmall = ((smallmean-intronmean)/smallmean)*100\n",
    "        percentageintron = 100-percentagesmall\n",
    "    else:\n",
    "        percentagesmall=0\n",
    "        percentageintron=100\n",
    "\n",
    "    to_append = pd.DataFrame({\"intron_name\":[intronname],\"small_name\" : [smallname],\"t-test_statistic\": [stat],\"t-test_pvalue\" : [val],\"likely_annotation\" : [annot],\"percentage_small\":[percentagesmall],\"percentage_intron\":[percentageintron]})\n",
    "    tests = tests.append(to_append, ignore_index = True)\n",
    "tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ff23ec6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "tests = tests[(tests[\"likely_annotation\"]==\"small gene\") & (tests[\"percentage_small\"]>0.0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e8433505",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>intron_name</th>\n",
       "      <th>small_name</th>\n",
       "      <th>t-test_statistic</th>\n",
       "      <th>t-test_pvalue</th>\n",
       "      <th>likely_annotation</th>\n",
       "      <th>percentage_small</th>\n",
       "      <th>percentage_intron</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000239945</td>\n",
       "      <td>ENSG00000238009</td>\n",
       "      <td>21.250115</td>\n",
       "      <td>5.910231e-100</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000230699</td>\n",
       "      <td>ENSG00000272438</td>\n",
       "      <td>43.130630</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000278073</td>\n",
       "      <td>ENSG00000131584</td>\n",
       "      <td>70.778151</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000283712</td>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>84.297424</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000284372</td>\n",
       "      <td>ENSG00000107404</td>\n",
       "      <td>69.384074</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4314</th>\n",
       "      <td>ENSG00000238039</td>\n",
       "      <td>ENSG00000241489</td>\n",
       "      <td>55.196212</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4315</th>\n",
       "      <td>ENSG00000276350</td>\n",
       "      <td>ENSG00000071859</td>\n",
       "      <td>8.033578</td>\n",
       "      <td>1.108019e-15</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4316</th>\n",
       "      <td>ENSG00000206948</td>\n",
       "      <td>ENSG00000130826</td>\n",
       "      <td>48.466644</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4317</th>\n",
       "      <td>ENSG00000206693</td>\n",
       "      <td>ENSG00000130826</td>\n",
       "      <td>25.820621</td>\n",
       "      <td>2.587225e-144</td>\n",
       "      <td>small gene</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4320</th>\n",
       "      <td>ENSG00000182712</td>\n",
       "      <td>ENSG00000288258</td>\n",
       "      <td>9.397026</td>\n",
       "      <td>6.912372e-21</td>\n",
       "      <td>small gene</td>\n",
       "      <td>16.830641</td>\n",
       "      <td>83.169359</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3173 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          intron_name       small_name  t-test_statistic  t-test_pvalue  \\\n",
       "0     ENSG00000239945  ENSG00000238009         21.250115  5.910231e-100   \n",
       "1     ENSG00000230699  ENSG00000272438         43.130630   0.000000e+00   \n",
       "4     ENSG00000278073  ENSG00000131584         70.778151   0.000000e+00   \n",
       "5     ENSG00000283712  ENSG00000127054         84.297424   0.000000e+00   \n",
       "7     ENSG00000284372  ENSG00000107404         69.384074   0.000000e+00   \n",
       "...               ...              ...               ...            ...   \n",
       "4314  ENSG00000238039  ENSG00000241489         55.196212   0.000000e+00   \n",
       "4315  ENSG00000276350  ENSG00000071859          8.033578   1.108019e-15   \n",
       "4316  ENSG00000206948  ENSG00000130826         48.466644   0.000000e+00   \n",
       "4317  ENSG00000206693  ENSG00000130826         25.820621  2.587225e-144   \n",
       "4320  ENSG00000182712  ENSG00000288258          9.397026   6.912372e-21   \n",
       "\n",
       "     likely_annotation  percentage_small  percentage_intron  \n",
       "0           small gene        100.000000           0.000000  \n",
       "1           small gene        100.000000           0.000000  \n",
       "4           small gene        100.000000           0.000000  \n",
       "5           small gene        100.000000           0.000000  \n",
       "7           small gene        100.000000           0.000000  \n",
       "...                ...               ...                ...  \n",
       "4314        small gene        100.000000           0.000000  \n",
       "4315        small gene        100.000000           0.000000  \n",
       "4316        small gene        100.000000           0.000000  \n",
       "4317        small gene        100.000000           0.000000  \n",
       "4320        small gene         16.830641          83.169359  \n",
       "\n",
       "[3173 rows x 7 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "81de6ee8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7343207590835454"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3173/4321"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ad8e8202",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>intron_name</th>\n",
       "      <th>small_name</th>\n",
       "      <th>t-test_statistic</th>\n",
       "      <th>t-test_pvalue</th>\n",
       "      <th>likely_annotation</th>\n",
       "      <th>percentage_small</th>\n",
       "      <th>percentage_intron</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>ENSG00000173614</td>\n",
       "      <td>ENSG00000265521</td>\n",
       "      <td>2.430107</td>\n",
       "      <td>1.510399e-02</td>\n",
       "      <td>small gene</td>\n",
       "      <td>29.561249</td>\n",
       "      <td>70.438751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>ENSG00000127423</td>\n",
       "      <td>ENSG00000272478</td>\n",
       "      <td>70.395632</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>90.616200</td>\n",
       "      <td>9.383800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>ENSG00000117758</td>\n",
       "      <td>ENSG00000269971</td>\n",
       "      <td>7.681641</td>\n",
       "      <td>1.598795e-14</td>\n",
       "      <td>small gene</td>\n",
       "      <td>58.458568</td>\n",
       "      <td>41.541432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>ENSG00000180198</td>\n",
       "      <td>ENSG00000274266</td>\n",
       "      <td>43.142063</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>88.767291</td>\n",
       "      <td>11.232709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>ENSG00000180198</td>\n",
       "      <td>ENSG00000200087</td>\n",
       "      <td>39.816439</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>87.457794</td>\n",
       "      <td>12.542206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4291</th>\n",
       "      <td>ENSG00000147202</td>\n",
       "      <td>ENSG00000204086</td>\n",
       "      <td>68.339795</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>68.220835</td>\n",
       "      <td>31.779165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4294</th>\n",
       "      <td>ENSG00000271147</td>\n",
       "      <td>ENSG00000286327</td>\n",
       "      <td>44.840473</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>16.592083</td>\n",
       "      <td>83.407917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4295</th>\n",
       "      <td>ENSG00000288597</td>\n",
       "      <td>ENSG00000123570</td>\n",
       "      <td>63.697491</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>small gene</td>\n",
       "      <td>78.349888</td>\n",
       "      <td>21.650112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4305</th>\n",
       "      <td>ENSG00000077713</td>\n",
       "      <td>ENSG00000207175</td>\n",
       "      <td>6.130504</td>\n",
       "      <td>8.866609e-10</td>\n",
       "      <td>small gene</td>\n",
       "      <td>53.806409</td>\n",
       "      <td>46.193591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4320</th>\n",
       "      <td>ENSG00000182712</td>\n",
       "      <td>ENSG00000288258</td>\n",
       "      <td>9.397026</td>\n",
       "      <td>6.912372e-21</td>\n",
       "      <td>small gene</td>\n",
       "      <td>16.830641</td>\n",
       "      <td>83.169359</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>387 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          intron_name       small_name  t-test_statistic  t-test_pvalue  \\\n",
       "20    ENSG00000173614  ENSG00000265521          2.430107   1.510399e-02   \n",
       "50    ENSG00000127423  ENSG00000272478         70.395632   0.000000e+00   \n",
       "55    ENSG00000117758  ENSG00000269971          7.681641   1.598795e-14   \n",
       "60    ENSG00000180198  ENSG00000274266         43.142063   0.000000e+00   \n",
       "61    ENSG00000180198  ENSG00000200087         39.816439   0.000000e+00   \n",
       "...               ...              ...               ...            ...   \n",
       "4291  ENSG00000147202  ENSG00000204086         68.339795   0.000000e+00   \n",
       "4294  ENSG00000271147  ENSG00000286327         44.840473   0.000000e+00   \n",
       "4295  ENSG00000288597  ENSG00000123570         63.697491   0.000000e+00   \n",
       "4305  ENSG00000077713  ENSG00000207175          6.130504   8.866609e-10   \n",
       "4320  ENSG00000182712  ENSG00000288258          9.397026   6.912372e-21   \n",
       "\n",
       "     likely_annotation  percentage_small  percentage_intron  \n",
       "20          small gene         29.561249          70.438751  \n",
       "50          small gene         90.616200           9.383800  \n",
       "55          small gene         58.458568          41.541432  \n",
       "60          small gene         88.767291          11.232709  \n",
       "61          small gene         87.457794          12.542206  \n",
       "...                ...               ...                ...  \n",
       "4291        small gene         68.220835          31.779165  \n",
       "4294        small gene         16.592083          83.407917  \n",
       "4295        small gene         78.349888          21.650112  \n",
       "4305        small gene         53.806409          46.193591  \n",
       "4320        small gene         16.830641          83.169359  \n",
       "\n",
       "[387 rows x 7 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tests[tests[\"percentage_small\"] != 100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3b1dd796",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12196659312953041"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "387/3173"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11243d69",
   "metadata": {},
   "source": [
    "## Final results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f0ae37a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = pd.read_csv('/Users/daliasebat/Desktop/12results.csv', sep=',')\n",
    "res = res[[\"Large name\", \"Small name\", \"% Large\",\"% Small\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bf5ba74c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000075151</td>\n",
       "      <td>ENSG00000233072</td>\n",
       "      <td>35.039451</td>\n",
       "      <td>64.960549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000275778</td>\n",
       "      <td>ENSG00000256188</td>\n",
       "      <td>80.708557</td>\n",
       "      <td>19.291443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000148498</td>\n",
       "      <td>ENSG00000229235</td>\n",
       "      <td>60.419763</td>\n",
       "      <td>39.580237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000270069</td>\n",
       "      <td>ENSG00000269902</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000182628</td>\n",
       "      <td>ENSG00000211514</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>ENSG00000240731</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Large name       Small name     % Large    % Small\n",
       "0   ENSG00000075292  ENSG00000281195  100.000000   0.000000\n",
       "1   ENSG00000075151  ENSG00000233072   35.039451  64.960549\n",
       "2   ENSG00000275778  ENSG00000256188   80.708557  19.291443\n",
       "3   ENSG00000148498  ENSG00000229235   60.419763  39.580237\n",
       "4   ENSG00000270069  ENSG00000269902  100.000000   0.000000\n",
       "5   ENSG00000149187  ENSG00000270072   98.259990   1.740010\n",
       "6   ENSG00000069275  ENSG00000201944  100.000000   0.000000\n",
       "7   ENSG00000198700  ENSG00000277681  100.000000   0.000000\n",
       "8   ENSG00000109670  ENSG00000264678   78.483763  21.516237\n",
       "9   ENSG00000182628  ENSG00000211514  100.000000   0.000000\n",
       "10  ENSG00000127054  ENSG00000240731  100.000000   0.000000\n",
       "11  ENSG00000142494  ENSG00000266079  100.000000   0.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "aae2a96f",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = pd.merge(res,reassignednames,how=\"inner\",on=\"Large name\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "95528ede",
   "metadata": {},
   "outputs": [],
   "source": [
    "reassignednames.columns = [\"Large name\", \"counts\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "2008f9a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000275778</td>\n",
       "      <td>ENSG00000256188</td>\n",
       "      <td>80.708557</td>\n",
       "      <td>19.291443</td>\n",
       "      <td>13354</td>\n",
       "      <td>0</td>\n",
       "      <td>30666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000270069</td>\n",
       "      <td>ENSG00000269902</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8258</td>\n",
       "      <td>0</td>\n",
       "      <td>8515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000182628</td>\n",
       "      <td>ENSG00000211514</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4812</td>\n",
       "      <td>0</td>\n",
       "      <td>4864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>ENSG00000240731</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3498</td>\n",
       "      <td>0</td>\n",
       "      <td>3778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "1  ENSG00000275778  ENSG00000256188   80.708557  19.291443          13354   \n",
       "2  ENSG00000270069  ENSG00000269902  100.000000   0.000000           8258   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "7  ENSG00000182628  ENSG00000211514  100.000000   0.000000           4812   \n",
       "8  ENSG00000127054  ENSG00000240731  100.000000   0.000000           3498   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  counts  \n",
       "0              0   13562  \n",
       "1              0   30666  \n",
       "2              0    8515  \n",
       "3              0   16958  \n",
       "4              0   14094  \n",
       "5              0   13083  \n",
       "6              0   10412  \n",
       "7              0    4864  \n",
       "8              0    3778  \n",
       "9              0    1218  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d6992471",
   "metadata": {},
   "outputs": [],
   "source": [
    "res.columns = [\"Large name\", \"Small name\", \"% Large\", \"% Small\",\"fcBeforeLarge\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "202f91d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "reassignednames.columns = [\"Small name\", \"counts\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "5d723d2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000275778</td>\n",
       "      <td>ENSG00000256188</td>\n",
       "      <td>80.708557</td>\n",
       "      <td>19.291443</td>\n",
       "      <td>13354</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000270069</td>\n",
       "      <td>ENSG00000269902</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8258</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000182628</td>\n",
       "      <td>ENSG00000211514</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4812</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>ENSG00000240731</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3498</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "1  ENSG00000275778  ENSG00000256188   80.708557  19.291443          13354   \n",
       "2  ENSG00000270069  ENSG00000269902  100.000000   0.000000           8258   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "7  ENSG00000182628  ENSG00000211514  100.000000   0.000000           4812   \n",
       "8  ENSG00000127054  ENSG00000240731  100.000000   0.000000           3498   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  \n",
       "0              0  \n",
       "1              0  \n",
       "2              0  \n",
       "3              0  \n",
       "4              0  \n",
       "5              0  \n",
       "6              0  \n",
       "7              0  \n",
       "8              0  \n",
       "9              0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = pd.merge(res,reassignednames,how=\"inner\",on=\"Small name\")\n",
    "res.columns = [\"Large name\", \"Small name\", \"% Large\", \"% Small\",\"fcBeforeLarge\",\"fcBeforeSmall\"]\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "80e0e9fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "res.columns = [\"Large name\", \"Small name\", \"% Large\", \"% Small\",\"fcBeforeLarge\",\"fcBeforeSmall\",\"fcAfterLarge\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "2c685382",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000275778</td>\n",
       "      <td>ENSG00000256188</td>\n",
       "      <td>80.708557</td>\n",
       "      <td>19.291443</td>\n",
       "      <td>13354</td>\n",
       "      <td>0</td>\n",
       "      <td>30666</td>\n",
       "      <td>321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000270069</td>\n",
       "      <td>ENSG00000269902</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8258</td>\n",
       "      <td>0</td>\n",
       "      <td>8515</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000182628</td>\n",
       "      <td>ENSG00000211514</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4812</td>\n",
       "      <td>0</td>\n",
       "      <td>4864</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>ENSG00000240731</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3498</td>\n",
       "      <td>0</td>\n",
       "      <td>3778</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "1  ENSG00000275778  ENSG00000256188   80.708557  19.291443          13354   \n",
       "2  ENSG00000270069  ENSG00000269902  100.000000   0.000000           8258   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "7  ENSG00000182628  ENSG00000211514  100.000000   0.000000           4812   \n",
       "8  ENSG00000127054  ENSG00000240731  100.000000   0.000000           3498   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall  \n",
       "0              0         13562           514  \n",
       "1              0         30666           321  \n",
       "2              0          8515            87  \n",
       "3              0         16958           147  \n",
       "4              0         14094            47  \n",
       "5              0         13083            32  \n",
       "6              0         10412            16  \n",
       "7              0          4864            21  \n",
       "8              0          3778           204  \n",
       "9              0          1218             5  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = pd.merge(res,reassignednames,how=\"inner\",on=\"Small name\")\n",
    "res.columns = [\"Large name\", \"Small name\", \"% Large\", \"% Small\",\"fcBeforeLarge\",\"fcBeforeSmall\",\"fcAfterLarge\",\"fcAfterSmall\"]\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "503e2678",
   "metadata": {},
   "outputs": [],
   "source": [
    "res[\"b-a\"]=res[\"fcAfterLarge\"]-res[\"fcBeforeLarge\"]\n",
    "res = res.drop(columns='b-aL')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "106589ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "      <th>b-a</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "      <td>514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000275778</td>\n",
       "      <td>ENSG00000256188</td>\n",
       "      <td>80.708557</td>\n",
       "      <td>19.291443</td>\n",
       "      <td>13354</td>\n",
       "      <td>0</td>\n",
       "      <td>30666</td>\n",
       "      <td>321</td>\n",
       "      <td>17312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000270069</td>\n",
       "      <td>ENSG00000269902</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8258</td>\n",
       "      <td>0</td>\n",
       "      <td>8515</td>\n",
       "      <td>87</td>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000182628</td>\n",
       "      <td>ENSG00000211514</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4812</td>\n",
       "      <td>0</td>\n",
       "      <td>4864</td>\n",
       "      <td>21</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>ENSG00000240731</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3498</td>\n",
       "      <td>0</td>\n",
       "      <td>3778</td>\n",
       "      <td>204</td>\n",
       "      <td>280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "1  ENSG00000275778  ENSG00000256188   80.708557  19.291443          13354   \n",
       "2  ENSG00000270069  ENSG00000269902  100.000000   0.000000           8258   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "7  ENSG00000182628  ENSG00000211514  100.000000   0.000000           4812   \n",
       "8  ENSG00000127054  ENSG00000240731  100.000000   0.000000           3498   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall    b-a  \n",
       "0              0         13562           514    514  \n",
       "1              0         30666           321  17312  \n",
       "2              0          8515            87    257  \n",
       "3              0         16958           147    147  \n",
       "4              0         14094            47     47  \n",
       "5              0         13083            32     32  \n",
       "6              0         10412            16     16  \n",
       "7              0          4864            21     52  \n",
       "8              0          3778           204    280  \n",
       "9              0          1218             5      5  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "a794e22e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "      <th>b-a</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "      <td>514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall  b-a  \n",
       "0              0         13562           514  514  \n",
       "3              0         16958           147  147  \n",
       "4              0         14094            47   47  \n",
       "5              0         13083            32   32  \n",
       "6              0         10412            16   16  \n",
       "9              0          1218             5    5  "
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res2 = res.take([0,3,4,5,6,9])\n",
    "res2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "38a58373",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "      <th>b-a</th>\n",
       "      <th>countsLarge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "      <td>514</td>\n",
       "      <td>514.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "      <td>144.442185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "      <td>47.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>32.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>12.557402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall  b-a  countsLarge  \n",
       "0              0         13562           514  514   514.000000  \n",
       "3              0         16958           147  147   144.442185  \n",
       "4              0         14094            47   47    47.000000  \n",
       "5              0         13083            32   32    32.000000  \n",
       "6              0         10412            16   16    12.557402  \n",
       "9              0          1218             5    5     5.000000  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res2[\"countsLarge\"]=res2[\"% Large\"]/100*res2[\"b-a\"]\n",
    "res2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "95384df6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "      <th>b-a</th>\n",
       "      <th>countsLarge</th>\n",
       "      <th>countsSmall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "      <td>514</td>\n",
       "      <td>514.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "      <td>144.442185</td>\n",
       "      <td>2.557815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>12.557402</td>\n",
       "      <td>3.442598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall  b-a  countsLarge  countsSmall  \n",
       "0              0         13562           514  514   514.000000     0.000000  \n",
       "3              0         16958           147  147   144.442185     2.557815  \n",
       "4              0         14094            47   47    47.000000     0.000000  \n",
       "5              0         13083            32   32    32.000000     0.000000  \n",
       "6              0         10412            16   16    12.557402     3.442598  \n",
       "9              0          1218             5    5     5.000000     0.000000  "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res2[\"countsSmall\"]=res2[\"% Small\"]/100*res2[\"b-a\"]\n",
    "res2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "dd4055b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "res2[\"countsSmall\"] = res2[\"countsSmall\"] + res2[\"fcBeforeSmall\"]\n",
    "res2[\"countsLarge\"] = res2[\"countsLarge\"] + res2[\"fcBeforeLarge\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "a58e4155",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "      <th>b-a</th>\n",
       "      <th>countsLarge</th>\n",
       "      <th>countsSmall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "      <td>514</td>\n",
       "      <td>13562.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "      <td>16955.442185</td>\n",
       "      <td>2.557815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "      <td>14094.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>13083.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>10408.557402</td>\n",
       "      <td>3.442598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1218.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall  b-a   countsLarge  countsSmall  \n",
       "0              0         13562           514  514  13562.000000     0.000000  \n",
       "3              0         16958           147  147  16955.442185     2.557815  \n",
       "4              0         14094            47   47  14094.000000     0.000000  \n",
       "5              0         13083            32   32  13083.000000     0.000000  \n",
       "6              0         10412            16   16  10408.557402     3.442598  \n",
       "9              0          1218             5    5   1218.000000     0.000000  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "dd30eb0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "      <th>b-a</th>\n",
       "      <th>countsLarge</th>\n",
       "      <th>countsSmall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "      <td>514</td>\n",
       "      <td>13562.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000275778</td>\n",
       "      <td>ENSG00000256188</td>\n",
       "      <td>80.708557</td>\n",
       "      <td>19.291443</td>\n",
       "      <td>13354</td>\n",
       "      <td>0</td>\n",
       "      <td>30666</td>\n",
       "      <td>321</td>\n",
       "      <td>321</td>\n",
       "      <td>13613.074467</td>\n",
       "      <td>61.925533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000270069</td>\n",
       "      <td>ENSG00000269902</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8258</td>\n",
       "      <td>0</td>\n",
       "      <td>8515</td>\n",
       "      <td>87</td>\n",
       "      <td>87</td>\n",
       "      <td>8345.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "      <td>16955.442185</td>\n",
       "      <td>2.557815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "      <td>14094.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>13083.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>10408.557402</td>\n",
       "      <td>3.442598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000182628</td>\n",
       "      <td>ENSG00000211514</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4812</td>\n",
       "      <td>0</td>\n",
       "      <td>4864</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>4833.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>ENSG00000240731</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3498</td>\n",
       "      <td>0</td>\n",
       "      <td>3778</td>\n",
       "      <td>204</td>\n",
       "      <td>204</td>\n",
       "      <td>3702.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1218.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "1  ENSG00000275778  ENSG00000256188   80.708557  19.291443          13354   \n",
       "2  ENSG00000270069  ENSG00000269902  100.000000   0.000000           8258   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "7  ENSG00000182628  ENSG00000211514  100.000000   0.000000           4812   \n",
       "8  ENSG00000127054  ENSG00000240731  100.000000   0.000000           3498   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall  b-a   countsLarge  countsSmall  \n",
       "0              0         13562           514  514  13562.000000     0.000000  \n",
       "1              0         30666           321  321  13613.074467    61.925533  \n",
       "2              0          8515            87   87   8345.000000     0.000000  \n",
       "3              0         16958           147  147  16955.442185     2.557815  \n",
       "4              0         14094            47   47  14094.000000     0.000000  \n",
       "5              0         13083            32   32  13083.000000     0.000000  \n",
       "6              0         10412            16   16  10408.557402     3.442598  \n",
       "7              0          4864            21   21   4833.000000     0.000000  \n",
       "8              0          3778           204  204   3702.000000     0.000000  \n",
       "9              0          1218             5    5   1218.000000     0.000000  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res[\"b-a\"] = res[\"fcAfterSmall\"]\n",
    "res[\"countsLarge\"]=res[\"% Large\"]/100*res[\"b-a\"]\n",
    "res[\"countsSmall\"]=res[\"% Small\"]/100*res[\"b-a\"]\n",
    "res[\"countsSmall\"] = res[\"countsSmall\"] + res[\"fcBeforeSmall\"]\n",
    "res[\"countsLarge\"] = res[\"countsLarge\"] + res[\"fcBeforeLarge\"]\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a79b8840",
   "metadata": {},
   "outputs": [],
   "source": [
    "res[\"countsDifLarge\"]=res[\"b-a\"]-res[\"countsSmall\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "2910959c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Large name</th>\n",
       "      <th>Small name</th>\n",
       "      <th>% Large</th>\n",
       "      <th>% Small</th>\n",
       "      <th>fcBeforeLarge</th>\n",
       "      <th>fcBeforeSmall</th>\n",
       "      <th>fcAfterLarge</th>\n",
       "      <th>fcAfterSmall</th>\n",
       "      <th>b-a</th>\n",
       "      <th>countsLarge</th>\n",
       "      <th>countsSmall</th>\n",
       "      <th>countsDifLarge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000075292</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13048</td>\n",
       "      <td>0</td>\n",
       "      <td>13562</td>\n",
       "      <td>514</td>\n",
       "      <td>514</td>\n",
       "      <td>13562.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>514.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000275778</td>\n",
       "      <td>ENSG00000256188</td>\n",
       "      <td>80.708557</td>\n",
       "      <td>19.291443</td>\n",
       "      <td>13354</td>\n",
       "      <td>0</td>\n",
       "      <td>30666</td>\n",
       "      <td>321</td>\n",
       "      <td>321</td>\n",
       "      <td>13613.074467</td>\n",
       "      <td>61.925533</td>\n",
       "      <td>259.074467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000270069</td>\n",
       "      <td>ENSG00000269902</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8258</td>\n",
       "      <td>0</td>\n",
       "      <td>8515</td>\n",
       "      <td>87</td>\n",
       "      <td>87</td>\n",
       "      <td>8345.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>87.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000149187</td>\n",
       "      <td>ENSG00000270072</td>\n",
       "      <td>98.259990</td>\n",
       "      <td>1.740010</td>\n",
       "      <td>16811</td>\n",
       "      <td>0</td>\n",
       "      <td>16958</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "      <td>16955.442185</td>\n",
       "      <td>2.557815</td>\n",
       "      <td>144.442185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000069275</td>\n",
       "      <td>ENSG00000201944</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14047</td>\n",
       "      <td>0</td>\n",
       "      <td>14094</td>\n",
       "      <td>47</td>\n",
       "      <td>47</td>\n",
       "      <td>14094.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>47.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ENSG00000198700</td>\n",
       "      <td>ENSG00000277681</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13051</td>\n",
       "      <td>0</td>\n",
       "      <td>13083</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>13083.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>32.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ENSG00000109670</td>\n",
       "      <td>ENSG00000264678</td>\n",
       "      <td>78.483763</td>\n",
       "      <td>21.516237</td>\n",
       "      <td>10396</td>\n",
       "      <td>0</td>\n",
       "      <td>10412</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>10408.557402</td>\n",
       "      <td>3.442598</td>\n",
       "      <td>12.557402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ENSG00000182628</td>\n",
       "      <td>ENSG00000211514</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4812</td>\n",
       "      <td>0</td>\n",
       "      <td>4864</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>4833.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ENSG00000127054</td>\n",
       "      <td>ENSG00000240731</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3498</td>\n",
       "      <td>0</td>\n",
       "      <td>3778</td>\n",
       "      <td>204</td>\n",
       "      <td>204</td>\n",
       "      <td>3702.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>204.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ENSG00000142494</td>\n",
       "      <td>ENSG00000266079</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>1218</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1218.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Large name       Small name     % Large    % Small  fcBeforeLarge  \\\n",
       "0  ENSG00000075292  ENSG00000281195  100.000000   0.000000          13048   \n",
       "1  ENSG00000275778  ENSG00000256188   80.708557  19.291443          13354   \n",
       "2  ENSG00000270069  ENSG00000269902  100.000000   0.000000           8258   \n",
       "3  ENSG00000149187  ENSG00000270072   98.259990   1.740010          16811   \n",
       "4  ENSG00000069275  ENSG00000201944  100.000000   0.000000          14047   \n",
       "5  ENSG00000198700  ENSG00000277681  100.000000   0.000000          13051   \n",
       "6  ENSG00000109670  ENSG00000264678   78.483763  21.516237          10396   \n",
       "7  ENSG00000182628  ENSG00000211514  100.000000   0.000000           4812   \n",
       "8  ENSG00000127054  ENSG00000240731  100.000000   0.000000           3498   \n",
       "9  ENSG00000142494  ENSG00000266079  100.000000   0.000000           1213   \n",
       "\n",
       "   fcBeforeSmall  fcAfterLarge  fcAfterSmall  b-a   countsLarge  countsSmall  \\\n",
       "0              0         13562           514  514  13562.000000     0.000000   \n",
       "1              0         30666           321  321  13613.074467    61.925533   \n",
       "2              0          8515            87   87   8345.000000     0.000000   \n",
       "3              0         16958           147  147  16955.442185     2.557815   \n",
       "4              0         14094            47   47  14094.000000     0.000000   \n",
       "5              0         13083            32   32  13083.000000     0.000000   \n",
       "6              0         10412            16   16  10408.557402     3.442598   \n",
       "7              0          4864            21   21   4833.000000     0.000000   \n",
       "8              0          3778           204  204   3702.000000     0.000000   \n",
       "9              0          1218             5    5   1218.000000     0.000000   \n",
       "\n",
       "   countsDifLarge  \n",
       "0      514.000000  \n",
       "1      259.074467  \n",
       "2       87.000000  \n",
       "3      144.442185  \n",
       "4       47.000000  \n",
       "5       32.000000  \n",
       "6       12.557402  \n",
       "7       21.000000  \n",
       "8      204.000000  \n",
       "9        5.000000  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "c7c15dbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "res[\"countsSmall\"]=res[\"countsSmall\"].round(decimals=0)\n",
    "res[\"countsDifLarge\"]=res[\"countsDifLarge\"].round(decimals=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "62aec876",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAADnCAYAAAC9roUQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAWvElEQVR4nO3deZQcVaHH8e+dJZOEJCXgIysKkhBACWEVwYcgO5rgEhZlVeAdWRLFdwRExAuERX0oRiSAQWQREFlCkEUQBYw+QAgkQICXIGASQoAAlRkmk8xy3x+3JzMDWaZ7uutWV/0+58yZJT2dX9JVv759u+qWcc4hIiLJqAkdQEQkT1S6IiIJUumKiCRIpSsikiCVrohIglS6IiIJUumKiCRIpSsikiCVrohIglS6IiIJUumKiCRIpSsikiCVrohIglS6IiIJUumKiCSoLnQAkTVsFAEjgOGFj86vhwEb4bfXOqAeqAXagbZuHy3AMmAp8Hrhc+fXy7GxFo+W4IwWMZdE2ag/MA7YGdgJ2Iauch1Qwb+5FXgDX8ILgTnAU8AcbLyign+vSA8qXakcGw0AdsCX686Fj0+SrldYDl/CT9FZwr6I3wsZSrJLpSvlYyMD7AJMAL6AH9GmqWB7q7OI7wdmAY9g49awkSQrVLrSN366YD980X4RP1WQNTHwJ3wB34uN3w2cR6qYSleKZ6PN8CU7AdgfGBg2UKLagNnA3cAsbLwwcB6pMipd6R0b1eGnDE4CDsIfPSDwOPBr4BZs/H7oMJJ+Kl1ZPxttgS/ab+CPMJC1awRuBq7CxnNCh5H0UunK2tnoc8C3gYloVFusvwO/AO7Axu2hw0i6qHSli41qgaOB7wDjg2bJhkXAr4ArsHFj6DCSDipd8Ww0CZgKjA0dJYPeAi4EpmPj1aHDSFgq3byz0eeBS4BdQ0fJgVeBHwE3YuOOwFkkEJVuXtloJ3zZ7h86Sg49C5yNjf8YOogkT6WbNzYajZ9GOBwwgdPk3WzgTGz8j9BBJDkq3bzw6yBcAEzBr9Il6XE7cCo2XhY6iFSeSjcPbLQHcC2wdegosk7LgcnY+ObQQaSyVLpZ5tdFmAqcjhasrxZ3At/Cxm+GDiKVodLNKht9Bj+61SFg1Wc5cBo2viV0ECk/lW7W+NHtBcB30ei22t0BnKxRb7aodLPERjsDN+KvxiDZ8DZ+uuH20EGkPFS6WWGjo4AZQP/QUaQiLgLO0XXeqp9Kt9rZqAa4GDgjdBSpuFnA0VrHobqpdKuZjYYAN+HXuZV8eA6YiI1fCR1ESqPSrVb+zLJZwLaho0jilgOTsPHDoYNI8fTudjWy0X7AE6hw82pT4EFsdEroIFI8jXSrjY0mAz9HC4uLdxX+mN620EGkd1S61cRGFwDnhI4hqXMncKTW6q0OKt1qYaOfAN8LHUNS617gq9i4JXQQWT+VbtrZyOCvtzU5dBRJvT8Dh2Lj5tBBZN30Rlr6XY4KV3pnP+CewjKeklIq3TSz0c8AvUMtxdgbmImNGkIHkbVT6aaVjS7CL8koUqwDgD9gIy1Wn0Iq3TSy0Q+A74eOIVVtAnBT4TRxSRE9IGljoyPxC4+L9NUk/LockiI6eiFN/BV6ZwN6I0TK6Whs/LvQIcRT6aaFjYYCTwKjQkeRzGkB9sLG/wwdRDS9kA426oc/q0iFK5XQH39Ew/DQQUSlmxZXAp8JHUIybQS+eLXIfWAq3dBsdDrwjdAxJBd2A64OHSLvNKcbko0OwJ8zrxXDJElnYOOfhg6RVyrdUPz82vPAxqGjSO50AHtj47+FDpJHml4I52pUuBJGDXAtNhoYOkgeqXRDsNGxwBdDx5Bc2wqdOBGEpheSZqMR+GmFjwROIuLw0wyPhg6SJxrpJu9qVLiSDgb4jaYZkqXSTZKNjkOXS5d02Qq4JHSIPNH0QlJsNBJ4Do1yJX0csA82fiR0kDzQSDc5mlaQtOqcZtgodJA8UOkmwUaHA4eEjiGyHp8Azg0dIg80vVBpfvX++cDo0FFENqAFGIONF4cOkmUa6VbeiahwpTr0B2zoEFmnkW4l+TmyhcCw0FFEeqkd2B4bvxA6SFZppFtZ30GFK9WlFrgwdIgs00i3Umy0KfAvYEjoKCIl2B0bPx46RBZppFs5Z6PCleqlEyYqRCPdSrDRx4D/AxpCRxHpg4Ox8f2hQ2SNRrqVYVHhSvW7GBuZ0CGyRqVbbv5036NDxxApg/HAgaFDZI1Kt/xOAepDhxApk2+HDpA1mtMtJ3+l1UXAR0NHESkTB2yLjV8KHSQrNNItr6NQ4Uq2GGBK6BBZotItr9NCBxCpgOOw0eDQIbJCpVsuNtoV/8aDSNZsBHw9dIisUOmWz0mhA4hUkLbvMtEbaeVgo0HAUmBQ6CgiFbQTNn46dIhqp5FueRyBCley78TQAbJApVseh4UOIJKAr+oMtb5T6faVf1d3n9AxRBIwFPh06BDVTqXbdwcC/UKHEEnIxNABqp1Kt+8mhA4gkiBt732koxf6wka1wBvoLDTJl09g41dCh6hWGun2zR6ocCV/NMXQByrdvtFLLckjbfd9oNLtGz3jSx7thY2i0CGqlUq3VDbaGhgbOoZIAPXAwaFDVCuVbul0bK7kmbb/Eql0S7dz6AAiAWn7L5FKt3Ta6CTPtsdGOimoBCrdUviN7VOhY4gEpH2gRCrd0myPTv0V0au9Eqh0S6ONTUT7QUlUuqXZKXQAkRRQ6ZZApVsabWwi/s20+tAhqo1Kt1h+I9s+dAyRFGhAb6YVTaVbvG3xG5uIwI6hA1QblW7xPhY6gEiKbB46QLVR6RZveOgAIimi/aFIKt3iaSMT6aL9oUgq3eKNCB1AJEVUukVS6RZPG5lIF+0PRVLpFk8bmUiXYdjIhA5RTVS6xdP0gkiXOuA/QoeoJirdYtioBhgaOoZIyujVXxFUusX5KP6ZXUS6qHSLoNItzqahA4ikkPaLIqS2dI0xmxtj/mqMmW+Med4Y8+3CzzcxxjxojFlQ+LzxB35vV2NMmzFm0jrud2djzLPGmIXGmGnGmGLeBKjY4h7fvGslm/20kU9d0bTmZ++sdOx/w/uM+WUT+9/wPu+udAA455hyXwujpzUybnoTc5a2r/U+n3q9ne2nNzF6WiNT7mvBOf/7Zz7YwrjpTRx758o1t71x3moue2xVpf55shb3L2xj7OX+8blk9of/71e1OY64rZnR0xr59IwmXn2vA4C//7uNcdOb2OXqJhYs94/9ey2OA254n47CY5ywovYLY8xBxpiXCvvgWWv58wZjzO8Lf/64MWaLsiVNgdSWLtAG/Ldzbjtgd+BUY8x2wFnAQ865McBDhe8BMMbUAj8GHljP/U4HTgLGFD4OKiJTxaYWjh9fz/1HD+zxs0tmr2LfLetYMHkQ+25Zt2bHvG9hGwveaWfB5EFcPaE/J9+zcm13ycn3rOTXE/qzYPIgFrzTzv0L24hbHHPeaGfeyYPoVwvPLmtnZavj2mdaOXVXrcuelPYOx6n3ruS+owYy/9RB3PxcK/Pf6vnkec3TrWzc37BwymBO372BM//cAsCl/7uae48ayGUH9efKJ1sBmProKs7+zwZqihpDlE2v94vCPvor/NWEtwO+VtivuzsBeNc5Nxr4OX6fzozUlq5zbqlzbk7h60bgBWAkcChwXeFm1wFf6vZrk4HbgTfXdp/GmOHAEOfcY84P+67/wO9vSMVGunt9vI5NBvTcYe56qY3jdvB/5XE71DPzpTb/8xfbOHZcP4wx7D6qjvdaYGljR4/fXdrYwYpVsPuoOowxHDuuHzNfbKPGQGu7Hy03tzrqa+F//rGaybv1o75WR/4k5Ykl7YzepIZPbFxDv1rDkZ+s564X23rc5q6XWtc8/pO2q+Ohf7XjnH/Mmlsdza1QXwsvv9PBohUd7L1FsLcbitkvdgMWOuf+5ZxbDdyC36e7676P3wbsW+Qr0lRLbel2V3h5sSPwODDUObe08EdvUDiawBgzEvgyfiS7LiOBxd2+X1z4WW8lulUva+pg+GD/EA0bZFjW5It1SaNj826HRo4aYljS2PNl5ZJGx6ghH77N4AbDIWPq2PGq9xk+qIaowfD4kna+tI2WRU3SkkbH5kO6dj//+PR84lyywrF55G9TV2OI+sPylY7vf7aBY+9s4eLZqzhtt3784C8tTN0n6MJ3xewXI4FF3b5f2z645jbOuTYgJkPzxql/J94YMwg/ev2Oc25F9yc855wzxnS2zWXAmc65jgw9Ka5hjKFc/6wz9mzgjD39TnrirJWcv08DM+as5oGX2xg3tJZz9tLKlWk2flgtj524EQCPvtbG8EE1OOCI25qprzFcekADQwclOp7K3g5XQake6Rpj6vGF+zvn3B2FHy8rTBN0Thd0TiXsAtxijHkVmARcYYz50gfucgkwqtv3owo/6622Dd+kfIYOqlkzbbC0sYPNNvIP18jBhkVx18h28QrHyME9t/uRgw2LV6z/Nk8vbcc5GLtpDX+Y38qthw3k5Xc71rw5I5UzcrBh0Yquka1/fHrujiOHGBbF/jZtHY64BTYd0GPQwdRHV/HDzzVw3iOr+Ml+/Tlpp3qmPb46mX9El9YibruEnstBrm0fXHMbY0wdEAHL+xIwTVJbuoU5nGuAF5xzP+v2R7OA4wpfHwfcBeCc29I5t4Vzbgv8PNApzrmZ3e+zMC2xwhize+H+j+38/V5KtHQnbl3HdXP99nzd3FYOHetfmEwcW8f181bjnOOxxW1EDayZhug0fHANQxrgscVtOOe4ft5qDt2m5wubH/51FRd8voHWDmgv7P81QHMxu5CUZNeRtSxY3sEr73awut1xy/OtTBzb8/GZuHX9msf/tvltfH7LWrq/irt+biuHjPHvBTS3Qo3xHwEev2L2i38CY4wxWxpj+gFH4vfp7rrv45OAvzgX5rCMSkjz9MKewDHAs8aYZwo/Oxu4BLjVGHMC8Bpw+IbuyBjzjHNufOHbU4DfAgOA+wofvVWx0v3a7c08/Go7bzc7Rv2skfP2buCsz/bj8NtWcs3TrXw8Mtx6mD+64ZAxddy7oI3Rv2xiYL3h2kMHrLmf8Vc28cy3BgFwxRcGcPzMlaxscxw8uo6DR3c93DNfbGWXETWMKJT1+GG1bD+9iXFDa9hhWG2l/plSUFdjuPyQ/hx4YzPtzvHN8f345Ga1nPvXFnYZUcvEsfWcsFM9x9zZxuhpjWwywHDLpK6jW5pbHb+d28oDhSNevrt7Pw65qZl+tXDTVwas66+tlF7vF865NmPMacCfgFrgN865540x5wNPOudm4QdbNxhjFgLv4Is5M0yGnkAqz0bbAc+HjiGSMsdg4xtDh6gWqZ1eSKn3QgcQSaH3QgeoJird4iwDOjZ4K5F8Wbrhm0gnlW4xbNzOOk68EMkxlW4RVLrF0wYm0qUD/wpQekmlWzyVrkiXNwuvAKWXVLrFU+mKdNH+UCSVbvFeDx1AJEVUukVS6RZPG5lIF+0PRVLpFk8bmUgX7Q9FUukWb/GGbyKSG8UsGCWodEsxH9C7tSLe3NABqo1Kt1g2bsZfxUIk79pR6RZNpVuaOaEDiKTAC4VBiBRBpVuap0IHEEkB7QclUOmWRhubiPaDkqh0S/MMWm1MRKVbApVuKWz8PvBi6BgiAbXjBx9SJJVu6fQsL3n2ot5EK41Kt3QqXckzbf8lUumW7tHQAUQC+lvoANVKpVsqGz+NTgmWfHLAH0OHqFYq3b7Rhid59E9s/EboENVKpds3s0IHEAlA230fqHT75i9AU+gQIglT6faBSrcvbLwKeDB0DJEEvYqNnw0dopqpdPtOz/qSJ3eHDlDtVLp9dw86JVjyQ4OMPlLp9pWN3wIeCx1DJAErgEdCh6h2Kt3yuD10AJEE3I2NW0OHqHYq3fK4AVgdOoRIhV0TOkAWqHTLwU8x3BU6hkgFLQQeDh0iC1S65fPr0AFEKmgGNnahQ2SBSrd8/gy8EjqESAW0Ar8NHSIrVLrl4kcB00PHEKmA27HxstAhskKlW14zgPdDhxAps1+EDpAlKt1ysvG7wPWhY4iU0ePYWMehl5FKt/ym4dcbFckCjXLLTKVbbjZ+EX9qsEi1ew24LXSIrFHpVsYP0HoMUv3O1Rlo5afSrQQbzwNuCh1DpA+eBW4MHSKLVLqV80N0arBUr7OxsV6tVYBKt1Js/CpwZegYIiWYjY11/b8KUelW1lSgMXQIkSKdFTpAlql0K8kvhHNp6BgiRbgbG/89dIgsU+lW3qXAm6FDiPRCB3B26BBZp9KtNBs34acZRNLuBmz8XOgQWafSTcZ04KnQIUTWYzlwZugQeaDSTYKN24Dj0SFkkl6naSWxZKh0k+Jftp0fOobIWtyBjW8JHSIvVLrJ+jGaZpB0eRs4OXSIPFHpJknTDJI+p2FjHV2TIJVu0vw0w3mhY4jgrwjx+9Ah8kalG8aPgSdDh5Bcexs4JXSIPFLphmDjdvw0w6rASSS/TtW0Qhgq3VBs/DxwWugYkktXYuNbQ4fIK5VuSDaeAVweOobkysPAlNAh8kylG97pwEOhQ0guvAIcpqtBhGWc0zUUg7PRJsATwFaho0hmNQF7YONnQwfJO41008DG7wAT0dq7UhkOOEaFmw4q3bSw8Xzg6+iCllJ+P8LGM0OHEE+lmyb+EinnhI4hmXIrNr4gdAjpotJNGxtfDFwXOoZkwhPAN0KHkJ5Uuul0AvCH0CGkqj0NHIiNm0MHkZ509EJa2agOuA04NHQUqTrPAftg47dDB5EPU+mmmY36AXcBB4WOIlXjJeBzWpA8vTS9kGY2Xg18Gbg3dBSpCi/gR7gq3BRT6aadjVvwxTszcBJJt3n4Ee7S0EFk/VS61cCPeA8DtPaprM1T+BHuW6GDyIapdKuFv+rEUfgrC4t0egjYt3BWo1QBvZFWjWx0MjANqAsdRYL6JfDdwhOyVAmVbrWy0d74Q8o2DZxEkrcavwj5jNBBpHgq3Wpmoy3xh5RtHzqKJOYt4CvYeHboIFIazelWMxu/AuyBL17JvrnArirc6qbSrXY2bsIfUnZh6ChSUbcDe2Lj10IHkb7R9EKW2GgScDWwcegoUjatwHnARdhYO2sGqHSzxkbD8cX7xdBRpM/mAsdj42dCB5HyUelmlY2OBX4BfCRwEileK3ARcKGuZ5Y9Kt0ss9EI/Kj3C6GjSK9pdJtxKt08sNFxwGVo1JtmrcDFwFSNbrNNpZsXNhoJXIVGvWmk0W2OqHTzxkYHAJcAO4aOIiwCfgRcj43bQ4eRZKh088hGBjgCmApsFThNHr2Df6PsV4WlOyVHVLp5ZqN64CTgXGBo4DR50IyfW/8JNo4DZ5FAVLoCNtoIOB34HjAkcJosagNmAOdrkXFR6UoXG22KL97/Qme1lcMq4Gb82WQLQoeRdFDpyofZaCBwDDAF2C5wmmq0FL/Y/FXY+M3QYSRdVLqyfjbaH/gWMBEtmr4hj+JPRrlVx9rKuqh0pXdsNBQ4HjgRGB02TKq8BVwHzMDGL4UOI+mn0pXi+MPN9gQOBSYAY8MGCmIp8EdgFvBA4cKhIr2i0pW+sdHW+KmHCfgyrg0bqGLm4Ut2FvCkllmUUql0pXxstAn+NOMJwEHA4LCB+mQ18AidRWvjfwfOIxmh0pXKsFEt/siHnYGdCp/HAwMDplqXVuB54ClgTuHzXJ0tJpWg0pXk+CLeBl/AnWW8Lcle0XgF8DK+WDs/5mHjVQlmkBxT6Up4NuoHDAOGAyMKnz/49UD8IWt1QD1+7rgdf7ZX50cLsAz/Rtfrhc9Le3xv4+ak/lkia6PSFRFJkK4GLCKSIJWuiEiCVLoiIglS6YqIJEilKyKSIJWuiEiCVLoiIglS6YqIJEilKyKSIJWuiEiCVLoiIglS6YqIJEilKyKSIJWuiEiCVLoiIglS6YqIJOj/AV89QOOy78RWAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for x in range(len(res)):\n",
    "    fig1, ax1 = plt.subplots()\n",
    "    ax1.pie([res.iloc[x][\"countsSmall\"],res.iloc[x][\"countsDifLarge\"]], labels=[res.iloc[x][\"countsSmall\"],res.iloc[x][\"countsDifLarge\"]],autopct='%1.1f%%')\n",
    "    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "10c6fe52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAADnCAYAAAC9roUQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAV1UlEQVR4nO3deZgdVZ3G8e/pJR1CkhJwyAYKEgighMgmgoOg7JrgAoKyquAjsig+IygiHiQs4qAIaACjyDLAIAgEWQQXwOgAkkDClkyCoEkIAQJUuul00kvNH6eTpock5N6+t361vJ/n6ac7zU3fN9yqt889VXXKJUmCiIiko8E6gIhImah0RURSpNIVEUmRSldEJEUqXRGRFKl0RURSpNIVEUmRSldEJEUqXRGRFKl0RURSpNIVEUmRSldEJEUqXRGRFKl0RURSpNIVEUlRk3UAkdV8FAGjgVG9H6u+HglsSNhem4BmoBHoBrre8tEBLAEWAy/2fl719VJ8rMWjxZzTIuaSKh8NBsYDOwM7AdvSV64b1PGZO4GXCCU8H5gJzABm4uNldXxekX5UulI/PtoA2JFQrjv3fryfbL3DSgglPINVJRyK+A3LUFJcKl2pHR85YBdgIvAJwog2SwW7vlYV8b3ANOBBfNxpG0mKQqUrAxOmC/YlFO0nCVMFRRMDvycU8N34+HXjPJJjKl2pnI82JZTsRGA/YIhtoFR1AdOBO4Fp+Hi+cR7JGZWurB8fNRGmDE4ADiScPSDwCPAL4CZ8/KZ1GMk+la6sm4+2IBTtFwlnGMiatQI3Alfi45nWYSS7VLqyZj76KPB1YBIa1Vbqr8BPgd/i427rMJItKl3p46NG4CjgG8AE0yzFsAD4GfBzfNxqHUayQaUrgY8OBSYD46yjFNArwHnAFHy80jqM2FLplp2PPgZcCOxqHaUEXgC+D1yPj3uMs4gRlW5Z+WgnQtnuZx2lhJ4EzsTHv7MOIulT6ZaNj8YSphE+BzjjNGU3HTgDH//NOoikR6VbFmEdhHOBUwmrdEl23AqchI+XWAeR+lPploGP9gCuBraxjiJrtRQ4BR/faB1E6kulW2RhXYTJwGlowfq8uA34Kj5+2TqI1IdKt6h89GHC6FangOXPUuBkfHyTdRCpPZVu0YTR7bnAN9HoNu9+C5yoUW+xqHSLxEc7A9cT7sYgxfAqYbrhVusgUhsq3aLw0ZHAVGCwdRSpi/OBs3Sft/xT6eadjxqAC4DTraNI3U0DjtI6Dvmm0s0zHw0HbiCscyvl8BQwCR8/bx1EqqPSzatwZdk0YDvrKJK6pcCh+PgB6yBSOR3dziMf7Qs8igq3rDYB7sdHX7MOIpXTSDdvfHQK8BO0sLgEVxLO6e2yDiLrR6WbJz46FzjLOoZkzm3AEVqrNx9Uunnho4uAb1nHkMy6G/gsPu6wDiLrptLNOh85wv22TrGOIpn3B+AQfNxuHUTWTgfSsu9yVLiyfvYF7updxlMySqWbZT76MaAj1FKJvYHb8VGLdRBZM5VuVvnofMKSjCKV2h/4DT7SYvUZpNLNIh99F/iOdQzJtYnADb2XiUuG6AXJGh8dQVh4XGSgDiWsyyEZorMXsiTcoXc6oAMhUktH4eP/sg4hgUo3K3w0AngM2Mw6ihROB7AXPv67dRDR9EI2+GgQ4aoiFa7Uw2DCGQ2jrIOISjcrrgA+bB1CCm00oXi1yL0xla41H50GfNE6hpTCbsBV1iHKTnO6lny0P+Gaea0YJmk6HR//yDpEWal0rYT5taeBjayjSOn0AHvj479YBykjTS/YuQoVrthoAK7GR0Osg5SRSteCj44BPmkdQ0ptK3ThhAlNL6TNR6MJ0wrvMk4ikhCmGR6yDlImGumm7ypUuJINDviVphnSpdJNk4+ORbdLl2zZCrjQOkSZaHohLT4aAzyFRrmSPQmwDz5+0DpIGWikmx5NK0hWrZpm2NA6SBmodNPgo88BB1vHEFmH9wFnW4coA00v1FtYvf8ZYKx1FJF30AFsjY8XWgcpMo106+94VLiSD4MBbx2i6DTSracwRzYfGGkdRWQ9dQM74ONnrYMUlUa69fUNVLiSL43AedYhikwj3Xrx0SbAP4Dh1lFEqrA7Pn7EOkQRaaRbP2eiwpX80gUTdaKRbj346D3A/wIt1lFEBuAgfHyvdYii0Ui3PjwqXMm/C/CRsw5RNCrdWguX+x5lHUOkBiYAB1iHKBqVbu19DWi2DiFSI1+3DlA0mtOtpXCn1QXAu62jiNRIAmyHj+daBykKjXRr60hUuFIsDjjVOkSRqHRr62TrACJ1cCw+GmYdoihUurXio10JBx5EimZD4AvWIYpCpVs7J1gHEKkjbd81ogNpteCjocBiYKh1FJE62gkfP24dIu800q2Nw1HhSvEdbx2gCFS6tXGYdQCRFHxWV6gNnEp3oMJR3X2sY4ikYATwIesQeafSHbgDgEHWIURSMsk6QN6pdAduonUAkRRpex8gnb0wED5qBF5CV6FJubwPHz9vHSKvNNIdmD1Q4Ur5aIphAFS6A6O3WlJG2u4HQKU7MPqNL2W0Fz6KrEPklUq3Wj7aBhhnHUPEQDNwkHWIvFLpVk/n5kqZafuvkkq3ejtbBxAxpO2/Sird6mmjkzLbAR/poqAqqHSrETa2D1jHEDGkfaBKKt3q7IAu/RXRu70qqHSro41NRPtBVVS61dnJOoBIBqh0q6DSrY42NpFwMK3ZOkTeqHQrFTayHaxjiGRACzqYVjGVbuW2I2xsIgIftA6QNyrdyr3HOoBIhmxuHSBvVLqVG2UdQCRDtD9USKVbOW1kIn20P1RIpVu50dYBRDJEpVshlW7ltJGJ9NH+UCGVbuW0kYn0GYmPnHWIPFHpVk7TCyJ9moB/sw6RJyrdSvioARhhHUMkY/TurwIq3cq8m/CbXUT6qHQroNKtzCbWAUQySPtFBQpRus65F5xzTzrnnnDOPdb7vcOcc08753qcc7us4e+8xznX5pz7jwqeqm6Le3zpjuVs+qNWPvDzttXfe215wn7XvcnWl7Wx33Vv8vryBIAkSTj1ng7GXtrK+CltzFzcvcafOePFbnaY0sbYS1s59Z4OkiT8/TPu72D8lDaOuW356sdeP3sllzy8ol7/PFmDe+d3Me7y8PpcOP3t/+9XdCUcfks7Yy9t5UNT23jhjR4A/vqvLsZPaWOXq9qYtzS89m90JOx/3Zv09L7GKatov3DOHeicm+ucm++c+3a9QmVVIUq31z5JkkxIkmRVwT4FfAZ4aC2P/zFwT4XPUbepheMmNHPvUUP6fe/C6Sv4+JZNzDtlKB/fsmn1jnnP/C7mvdbNvFOGctXEwZx41/I1/UhOvGs5v5g4mHmnDGXea93cO7+LuCNh5kvdzD5xKIMa4ckl3SzvTLj6iU5O2lXrsqeluyfhpLuXc8+RQ3jmpKHc+FQnz7zS/5fnLx/vZKPBjvmnDuO03Vs44w8dAFz8Pyu5+8ghXHLgYK54rBOAyQ+t4Mx/b6HBmZxIsN77hXOuEfgZ4W7C2wOfd85tX69gWVSk0u0nSZJnkySZu6b/5pz7FPA88HSFP7ZuI9293tvExhv032HumNvFsTuGpzx2x2Zun9sVvj+ni2PGD8I5x+6bNfFGByxu7en3dxe39rBsBey+WRPOOY4ZP4jb53TR4KCzO4yW2zsTmhvhP/+2klN2G0Rzo878Scuji7oZu3ED79uogUGNjiPe38wdc7r6PeaOuZ2rX/9Dt2/ij//oJknCa9bemdDeCc2N8NxrPSxY1sPeW5gdbqhkv9gNmJ8kyT+SJFkJ3AQcUp9Y2VSU0k2A+5xzM5xzX1nXA51zQ4EzgHOqeJ5Ut+olbT2MGhZeopFDHUvaQrEuak3Y/C2nRm423LGotf/bykWtCZsNf/tjhrU4Dt66iQ9e+SajhjYQtTgeWdTNp7bVsqhpWtSasPnwvt0vvD79f3EuWpaweRQe09TgiAbD0uUJ3/lIC8fc1sEF01dw8m6D+O6fOpi8j+nCd5XsF2OABW/588Le75VGUY7EfyRJkkXOuU2B+51zc5IkWdu0ggd+kiRJm7N5K1YV5xy1inv6ni2cvmfYSY+ftpwf7NPC1Jkrue+5LsaPaOSsvbRyZZZNGNnIw8dvCMBD/+xi1NAGEuDwW9ppbnBcvH8LI4amOp7Kz46UAYUY6SZJsqj388vAbYS3MGvzIeAi59wLwDeAM51zJ6/nU3W980NqZ8TQhtXTBotbe9h0w/ByjRnmWBD3jWwXLksYM6z/dj9mmGPhsnU/5vHF3SQJjNukgd8808nNhw3hudd7Vh+ckfoZM8yxYFnfyDa8Pv13xzHDHQvi8JiunoS4AzZ5yxRUkiRMfmgF3/toC+c8uIKL9h3MCTs1c+kjK9P5R/TprOCxi+i/HORmvd8rjdyXrnNuQ+fcsFVfA/sTDqKtUZIk/54kyRZJkmwBXAKcnyTJ5ev5dKmW7qRtmrhmVtier5nVySHjwhuTSeOauHb2SpIk4eGFXUQtrJ6GWGXUsAaGt8DDC7tIkoRrZ6/kkG37v7H53p9XcO7HWujsge7e/b8BaK9kF5Kq7DqmkXlLe3j+9R5Wdifc9HQnk8b1f30mbdO8+vW/5ZkuPrZlI299d3btrE4O3jocC2jvhAYXPgxev0r2i78DWzvntnTODQKOAKbVJ1Y2FWF6YQRwW+/G2ATckCTJvc65TwOXES5RvMs590SSJAcM8LnqVrqfv7WdB17o5tX2hM1+3Mo5e7fw7Y8M4nO3LOeXj3fy3shx82Hh7IaDt27i7nldjL2sjSHNjqsP2WD1z5lwRRtPfHUoAD//xAYcd/tylnclHDS2iYPG9r3ct8/pZJfRDYzuLesJIxvZYUob40c0sOPIxnr9M6VXU4Pj8oMHc8D17XQnCV+aMIj3b9rI2X/uYJfRjUwa18yXd2rm6Nu6GHtpKxtv4Ljp0L6zW9o7E349q5P7es94+ebugzj4hnYGNcINn9lgbU9bL+u9XyRJ0tX7zvL3QCPwqyRJKj2gnWsusTmvL598tD2Vn/EgUnRH4+PrrUPkRe6nF1L2hnUAkQx6wzpAnqh0K7ME6HnHR4mUy2LrAHmi0q2Ej7uBl61jiGSMSrcCKt3KaQMT6dNDeAco60mlWzmVrkifl3vfAcp6UulWTqUr0kf7Q4VUupV70TqASIaodCuk0q2cNjKRPtofKqTSrZw2MpE+2h8qpNKt3ELrACIZUqrFampBpVu5ZwAdrRUJZlkHyBuVbqV83A48ax1DJAO6UelWTKVbnZnWAUQy4NneQYhUQKVbnRnWAUQyQPtBFVS61dHGJqL9oCoq3eo8gVYbE1HpVkGlWw0fvwnMsY4hYqibMPiQCql0q6ff8lJmc3QQrToq3eqpdKXMtP1XSaVbvYesA4gY+ot1gLxS6VbLx4+jS4KlnBLgd9Yh8kqlOzDa8KSM/o6PX7IOkVcq3YGZZh1AxIC2+wFQ6Q7Mn4A26xAiKVPpDoBKdyB8vAK43zqGSIpewMdPWofIM5XuwOm3vpTJndYB8k6lO3B3oUuCpTw0yBggle5A+fgV4GHrGCIpWAY8aB0i71S6tXGrdQCRFNyJjzutQ+SdSrc2rgNWWocQqbNfWgcoApVuLYQphjusY4jU0XzgAesQRaDSrZ1fWAcQqaOp+DixDlEEKt3a+QPwvHUIkTroBH5tHaIoVLq1EkYBU6xjiNTBrfh4iXWIolDp1tZU4E3rECI19lPrAEWi0q0lH78OXGsdQ6SGHsHHOg+9hlS6tXcpYb1RkSLQKLfGVLq15uM5hEuDRfLun8At1iGKRqVbH99F6zFI/p2tK9BqT6VbDz6eDdxgHUNkAJ4ErrcOUUQq3fr5Hro0WPLrTHysd2t1oNKtFx+/AFxhHUOkCtPxse7/Vycq3fqaDLRahxCp0LetAxSZSreewkI4F1vHEKnAnfj4r9YhikylW38XAy9bhxBZDz3AmdYhik6lW28+biNMM4hk3XX4+CnrEEWn0k3HFGCGdQiRdVgKnGEdogxUumnwcRdwHDqFTLLrZK0klg6VblrC27YfWMcQWYPf4uObrEOUhUo3XT9E0wySLa8CJ1qHKBOVbpo0zSDZczI+1tk1KVLppi1MM5xjHUOEcEeI/7YOUTYqXRs/BB6zDiGl9irwNesQZaTSteDjbsI0wwrjJFJeJ2lawYZK14qPnwZOto4hpXQFPr7ZOkRZqXQt+XgqcLl1DCmVB4BTrUOUmUrX3mnAH61DSCk8Dxymu0HYckmieyia89HGwKPAVtZRpLDagD3w8ZPWQcpOI90s8PFrwCS09q7URwIcrcLNBpVuVvj4GeAL6IaWUnvfx8e3W4eQQKWbJeEWKWdZx5BCuRkfn2sdQvqodLPGxxcA11jHkEJ4FPiidQjpT6WbTV8GfmMdQnLtceAAfNxuHUT609kLWeWjJuAW4BDrKJI7TwH74ONXrYPI26l0s8xHg4A7gAOto0huzAU+qgXJs0vTC1nm45XAp4G7raNILjxLGOGqcDNMpZt1Pu4gFO/txkkk22YTRriLrYPIuql08yCMeA8DtPaprMkMwgj3Fesg8s5UunkR7jpxJOHOwiKr/BH4eO9VjZIDOpCWRz46EbgUaLKOIqYuA77Z+wtZckKlm1c+2ptwStkmxkkkfSsJi5BPtQ4ilVPp5pmPtiScUraDdRRJzSvAZ/DxdOsgUh3N6eaZj58H9iAUrxTfLGBXFW6+qXTzzsdthFPKzrOOInV1K7AnPv6ndRAZGE0vFImPDgWuAjayjiI10wmcA5yPj7WzFoBKt2h8NIpQvJ+0jiIDNgs4Dh8/YR1EakelW1Q+Ogb4KfAu4yRSuU7gfOA83c+seFS6Reaj0YRR7yeso8h60+i24FS6ZeCjY4FL0Kg3yzqBC4DJGt0Wm0q3LHw0BrgSjXqzSKPbElHplo2P9gcuBD5oHUVYAHwfuBYfd1uHkXSodMvIRw44HJgMbGWcpoxeIxwo+1nv0p1SIirdMvNRM3ACcDYwwjhNGbQT5tYvwsexcRYxotIV8NGGwGnAt4DhxmmKqAuYCvxAi4yLSlf6+GgTQvF+BV3VVgsrgBsJV5PNsw4j2aDSlbfz0RDgaOBUYHvjNHm0mLDY/JX4+GXrMJItKl1ZNx/tB3wVmIQWTX8nDxEuRrlZ59rK2qh0Zf34aARwHHA8MNY2TKa8AlwDTMXHc63DSPapdKUy4XSzPYFDgInAONtAJhYDvwOmAff13jhUZL2odGVgfLQNYephIqGMG20D1c1sQslOAx7TMotSLZWu1I6PNiZcZjwROBAYZhtoQFYCD7KqaH38L+M8UhAqXakPHzUSznzYGdip9/MEYIhhqrXpBJ4GZgAzez/P0tViUg8qXUlPKOJtCQW8qoy3I907Gi8DniMU66qP2fh4RYoZpMRUumLPR4OAkcAoYHTv5///9RDCKWtNQDNh7ribcLXXqo8OYAnhQNeLvZ8X9/uzj9vT+meJrIlKV0QkRbobsIhIilS6IiIpUumKiKRIpSsikiKVrohIilS6IiIpUumKiKRIpSsikiKVrohIilS6IiIpUumKiKRIpSsikiKVrohIilS6IiIpUumKiKRIpSsikqL/A6aK90avArFdAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for x in range(len(res)):\n",
    "    fig1, ax1 = plt.subplots()\n",
    "    ax1.pie([res.iloc[x][\"fcBeforeSmall\"],res.iloc[x][\"b-a\"]], labels=[res.iloc[x][\"fcBeforeSmall\"],res.iloc[x][\"b-a\"]],autopct='%1.1f%%')\n",
    "    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "2a7ed734",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>chrom</th>\n",
       "      <th>source</th>\n",
       "      <th>biotype</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "      <th>w</th>\n",
       "      <th>strand</th>\n",
       "      <th>n</th>\n",
       "      <th>annot</th>\n",
       "      <th>gene_id</th>\n",
       "      <th>gene_stable_id</th>\n",
       "      <th>gene_name</th>\n",
       "      <th>gene_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>334180</th>\n",
       "      <td>334180</td>\n",
       "      <td>chr2</td>\n",
       "      <td>HAVANA</td>\n",
       "      <td>gene</td>\n",
       "      <td>71373938</td>\n",
       "      <td>71376320</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "      <td>.</td>\n",
       "      <td>gene_id \"ENSG00000281195.1\"; gene_type \"lncRNA...</td>\n",
       "      <td>ENSG00000281195.1</td>\n",
       "      <td>ENSG00000281195</td>\n",
       "      <td>AC007878.1</td>\n",
       "      <td>lncRNA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0 chrom  source biotype     start       end  w strand  n  \\\n",
       "334180      334180  chr2  HAVANA    gene  71373938  71376320  .      +  .   \n",
       "\n",
       "                                                    annot            gene_id  \\\n",
       "334180  gene_id \"ENSG00000281195.1\"; gene_type \"lncRNA...  ENSG00000281195.1   \n",
       "\n",
       "         gene_stable_id   gene_name gene_type  \n",
       "334180  ENSG00000281195  AC007878.1    lncRNA  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gtf[gtf[\"gene_stable_id\"]==\"ENSG00000281195\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4b97b8d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCAN Result</th>\n",
       "      <th>PF Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [SCAN Result, PF Result]\n",
       "Index: []"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = pd.DataFrame(columns = [\"SCAN Result\", \"PF Result\"])\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ea28d324",
   "metadata": {},
   "outputs": [],
   "source": [
    "x[\"SCAN Result\"] = [\"negative\",\"positive\",\"positive\",\"positive\",\"negative\",\"positive\",\"negative\",\"negative\",\"positive\",\"negative\",\"negative\",\"negative\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e6fe1d01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCAN Result</th>\n",
       "      <th>PF Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SCAN Result PF Result\n",
       "0     negative       NaN\n",
       "1     positive       NaN\n",
       "2     positive       NaN\n",
       "3     positive       NaN\n",
       "4     negative       NaN\n",
       "5     positive       NaN\n",
       "6     negative       NaN\n",
       "7     negative       NaN\n",
       "8     positive       NaN\n",
       "9     negative       NaN\n",
       "10    negative       NaN\n",
       "11    negative       NaN"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "beaaecda",
   "metadata": {},
   "outputs": [],
   "source": [
    "x[\"PF Result\"]=[\"negative\",\"positive\",\"positive\",\"positive\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\",\"negative\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "33c2787e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCAN Result</th>\n",
       "      <th>PF Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>negative</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>positive</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>positive</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>positive</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>negative</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>negative</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>negative</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>positive</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>negative</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>negative</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>negative</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SCAN Result PF Result\n",
       "0     negative  negative\n",
       "1     positive  positive\n",
       "2     positive  positive\n",
       "3     positive  positive\n",
       "4     negative  negative\n",
       "5     positive  negative\n",
       "6     negative  negative\n",
       "7     negative  negative\n",
       "8     positive  negative\n",
       "9     negative  negative\n",
       "10    negative  negative\n",
       "11    negative  negative"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2152e97c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
